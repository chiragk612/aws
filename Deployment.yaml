Resources:
  WeatherS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: cgkbucket

  WeatherS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WeatherS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::cgkbucket/*'

  WeatherData:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: WeatherData
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  WeatherIamUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  WeatherIamUserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WeatherIamUserPolicy
      Roles:
        - !Ref WeatherIamUserRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
              - 's3:GetObject'
              - 's3:PutObject'
            Resource:
              - !GetAtt WeatherData.Arn
              - !Sub 'arn:${AWS::Partition}:s3:::cgkbucket/*'

  WeatherUpdatesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: cgkbucket
        S3Key: case-study-1.0-SNAPSHOT-lambda-package.zip
      Handler: org.aws.StreamLambdaHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Timeout: 30
      Role: !GetAtt WeatherIamUserRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref WeatherData
    DependsOn:
      - WeatherIamUserPolicy
      - WeatherIamUserRole
      - WeatherS3Bucket

  WeatherRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: Weather-app-rest-api
      Description: This service serves weather data.

  WeatherApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt WeatherRestApi.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref WeatherRestApi

  WeatherUpdatesApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref WeatherApiResource
      RestApiId: !Ref WeatherRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WeatherUpdatesLambdaFunction.Arn}/invocations'

  WeatherApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref WeatherRestApi
      Description: This service serves weather data.
    DependsOn:
      - WeatherUpdatesApiMethod
      - WeatherApiResource

  WeatherApiDeploymentStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: prod
      DeploymentId: !Ref WeatherApiDeployment
      RestApiId: !Ref WeatherRestApi

  WeatherApiLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt WeatherUpdatesLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${WeatherRestApi}/*/*'

  WeatherEventBus:
    Type: 'AWS::Events::EventBus'
    Properties:
      Name: WeatherEventBus

  WeatherEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${WeatherRestApi}/stages/${WeatherApiDeploymentStage}/resources/${WeatherApiResource}/methods/ANY'
          Id: Target0

  WeatherEventRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt WeatherUpdatesLambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeatherEventBridgeRule.Arn

Outputs:
  WeatherApiEndpoint:
    Value: !Sub 'https://${WeatherRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${WeatherApiDeploymentStage}/'
